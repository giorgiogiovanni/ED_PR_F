PRACTICA FINAL ESTRUCTURA DE DATOS

El proyecto completo está almacenado en github
https://github.com/giorgiogiovanni/ED_PR_F


Autores:
-------------------------------------------------
    - Jorge Bailon Gonzalez
    - Rafa Cano Exposito

Proyecto final para asignatura de E.D.2020-2021


USO DEL PROYECTO:
-------------------------------------------------
Existen 2 archivos para probar la lectura de la clase Ruta y de la clase Almacen_Rutas
para ello también existen los archivos ruta1.txt (consiste en una unica ruta para su lectura)
y el archivo almacen_rutas.txt (para leer una serie de rutas y crear la instancia de la clase)

 * PRUEBA RUTA
    make pruebaruta
    ejecutar:   ./bin/pruebaruta datos/ruta1.txt

 * RUTAS
    make rutas
    ejecutar:  ./bin/rutas datos/almacen_rutas.txt 

Finalmente el proyecto definitivo se realiza mediante la rutina [ rutas_aereas ]

 * RUTAS AEREAS_ FINAL

    make rutas_aereas
    ejectuar:   ./bin/rutas_aereas <... parametros ...>
        
    PARAMETROS:
    1  Fichero con la informacion de los paises
    2  Nombre de la imagen con el mapa del mundo
    3  Directorio con las banderas
    4  Fichero con el almacen de rutas
    5  Nombre de la imagen con el avion
    6  Nombre de la imagen de la mascara del avion
    
    Existe tambien una rutina preparada:
    make exe
    Esta rutina ejecutará el programa con una serie de archivos previamente seleccionados


DIARIO:
-------------------------------------------------

0.  Primer análisis y diseño de la practica     Jorge y Rafael
1.  Implementacion de Punto.h                   Jorge
2.  Primera implementacion de Ruta.h            Rafael
3.  Creación pruebaruta.cpp                     Rafael
        para probar la lectura
4.  Primera implementacion de AlmacenRutas.h    Jorge
5.  Creación pruebarutas.cpp                    Jorge
        para probar la lectura
6.  Rectificacion de implmentaciones            Jorge y Rafael
        Ruta.h y AlmacenRutas.h Jorge y Rafael
        Aquí se rectificaron los tipos de la STL utilizados internamente en los TDA según comentamos por correo

7.  Revisión de rutas_aereas.cpp                Rafael
        para uso con nuestros espacios de nombres de los TDAs

8.  Corrección Documentacion final              Rafael
9.  Complementar Makefile                       Jorge
10. Revision README.md (github sintaxis)        Jorge
        y README.txt (explicativo)


FASES Y ERRORES
-------------------------------------------------

- Originalmente diseñamos los TDAs de manera que Ruta consistía en un STL vector y Almacen_Rutas en un
STL list con las rutas almacenadas en su interior. Posteriormente entendimos que Almacen_Rutas debía, por
cuestiones de eficiencia en la busqueda, estar construido mediante un tipo map. De igual manera, Ruta podía
consistir internamente en un list de Punto, y un nombre asociado a la ruta. Este nombre se repetiría en el 
map como clave debido al doble encapsulamiento

- En la utilización de las clases suministradas, los metodos de lectura de la clase Paises daban error.
En algun caso leia la siguiente linea, al estar implementado como lo estaba mantenia el nombre (Zimbaue) pero 
el valor almacenado era incorrecto.
Para solucionarlo intentamos crear un filtro con un if(is.peek() != EOF) pero si la siguiente linea era vacía 
no conseguiamos que una correcta lectura. Finalmente obligamos en la lectura de Pais.h que cada pais leido
comprobase si tanto los datos locales "pais" como "bandera" eran != "", de manera que si había obtenido una
lectura vacía (linea en blanco) no creaba la instancia pais. De esta manera conseguimos arreglar ese pequeño
problema en la lectura del archivo.

- En la lectura de puntos incluimos una comprobacion obligando a que el formato sea: "(lat, lon)",
esta comprobacion es alterable para que no comprometa la lectura si fuese necesario.

- Por suerte, las implmentaciones de las clases iteradoras no supusieron ningun problema y a priori parecen
correctas. En rutas_aereas.cpp se utiliza la clase iteradora de Ruta_Aerea y funciona correctamente.

- Algunos nombres tanto de las clases como de metodos fueron elegidos durante la implementacion, adaptando o 
alterando algunos de los archivos de referencia para adaptarlos al estandar camelCase. De igual forma, la clase 
Punto se denomina PuntoE, simplemente por tratarse de un punto geografico (Esferico), con los datos miembros 
con nombres latitud y longitud, y el metodo incluido para comprobar la validez de los valores leidos. No le 
encontrabamos sentido a llamarlo genericamente Punto. 
